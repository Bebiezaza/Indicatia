buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.3.0"
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.3.0"
}

def api = new groovy.json.JsonSlurper().parseText(file("${api_token_path}").text)
def keystore = new groovy.json.JsonSlurper().parseText(file("${keystore_path}").text)
def mcVersion = project.mc_version

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"

sourceSets.main {
    java {
        srcDirs = ["src/main/java", "dependencies/main/java"]
        exclude "stevekung/mods/stevekunglib/mixin/**"
    }
    resources {
        srcDirs = ["src/main/resources", "dependencies/main/resources"]
    }
}

version = project.version
group = "stevekung.mods.indicatia"
archivesBaseName = "Indicatia-All"
sourceCompatibility = targetCompatibility = 1.8

minecraft {
    version = "${forge_version}"
    runDir = "run"
    mappings = "${mcp_mapping}"
    makeObfSourceJar = false

    replace "@FINGERPRINT@", keystore.sha1
    replaceIn "IndicatiaMod.java"
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    embed("org.spongepowered:mixin:0.7.11-SNAPSHOT") { transitive = false }
}

repositories {
    // Curse Gradle
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    // Mixin
    maven {
        url = "http://repo.spongepowered.org/maven/"
    }
}

sourceSets {
    main {
        ext.refMap = "mixins.indicatia.refmap.json"
    }
}

ext.finalJar = "build/libs/Indicatia-" + mcVersion + "-" + version + ".jar"
ext.coreJar = "build/libs/" + archivesBaseName + "-" + version + ".jar"
ext.coreFiles = ["stevekung/mods/indicatia/**", "assets/indicatia/**", "pack.mcmeta", "META-INF/indicatia_at.cfg", "mixins.indicatia.json", "mixins.indicatia.refmap.json"]
ext.apiFiles = ["micdoodle8/**", "stevekung/mods/stevekunglib/**", "mixins.stevekung's_lib.json"]

curseforge {
    apiKey = api.indicatia
    project {
        id = "272146"
        changelog = "Change Log"
        changelogType = "markdown"
        releaseType = "release"
        addGameVersion mcVersion

        mainArtifact(file("build/libs/Indicatia-" + mcVersion + "-" + version + ".jar")) {
            displayName = "Indicatia-" + mcVersion + "-" + version
            relations {
                requiredLibrary "stevekungs-lib"
            }
        }
    }
}

// signing jar first
task buildJar(type: SignJar, dependsOn: "processJar") {
    keyStore = keystore.keystore_path
    alias = keystore.alias
    storePass = keystore.keystore_pass
    keyPass = keystore.keystore_pass
    inputFile = project.ext.finalJar
    outputFile = project.ext.finalJar
}

// processing jar
task processJar(type: Jar, dependsOn: "rePackAllJar") {
    outputs.upToDateWhen { false }
    baseName = "Indicatia-" + mcVersion

    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    excludes.addAll(project.ext.apiFiles)

    from(zipTree(project.ext.coreJar)) {
        includes.addAll(project.ext.coreFiles)
    }

    manifest {
        attributes("FMLAT": "indicatia_at.cfg",
                   "FMLCorePluginContainsFMLMod": "true",
                   "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                   "MixinConfigs": "mixins.indicatia.json",
                   "ForceLoadAsMod": "true"
        )
    }
}

task rePackAllJar(type: Jar, dependsOn: "copyModFiles") {
    from "temporary"
}

task copyModFiles(type: Copy, dependsOn: "reobfJar") {
    from(zipTree(project.ext.coreJar))
    into "temporary"
}

task deleteTemporary(type: Delete) {
    delete "temporary"
}

task buildDeobfJar(type: Jar) {
    from sourceSets.main.output
    excludes.addAll(project.ext.apiFiles)
    classifier = "deobf"
    manifest {
        attributes("FMLAT": "indicatia_at.cfg",
                   "FMLCorePluginContainsFMLMod": "true",
                   "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                   "MixinConfigs": "mixins.indicatia.json",
                   "ForceLoadAsMod": "true"
        )
    }
}

buildJar.finalizedBy(deleteTemporary)