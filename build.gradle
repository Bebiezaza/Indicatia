buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.2"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.1.2"
}

def api = new groovy.json.JsonSlurper().parseText(file("${api_token_path}").text)
def mcVersion = project.mc_version
def hasInternal = project.hasProperty("internal")

apply plugin: "net.minecraftforge.gradle"

sourceSets.main {
    java {
        srcDirs = ["src/main/java", "dependencies/main/java"]
    }
    resources {
        srcDirs = ["src/main/resources", "dependencies/main/resources"]
    }
}

version = project.version
group = "stevekung.mods.indicatia"
archivesBaseName = "Indicatia-All"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

minecraft {
    mappings channel: "snapshot", version: "20180921-1.13"
    accessTransformer = file "src/main/resources/META-INF/accesstransformer.cfg"
    accessTransformer = file "dependencies/main/resources/META-INF/accesstransformer.cfg"

    runs {
        client = {
            workingDirectory project.file("run").canonicalPath
            source sourceSets.main
        }
        server = {
            workingDirectory project.file("run").canonicalPath
        }
    }
}

repositories {
    // Curse Gradle
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    minecraft "net.minecraftforge.test:forge:1.13-24.0.183-1.13-pre"
}

ext.finalJar = "build/libs/" + (hasInternal ? "IndicatiaExtra-" : "Indicatia-") + mcVersion + "-" + version + ".jar"
ext.coreJar = "build/libs/" + archivesBaseName + "-" + version + ".jar"
ext.coreFiles = ["stevekung/mods/indicatia/**", "assets/indicatia/**", "META_INF/mods.toml", "pack.mcmeta", "META-INF/indicatia_at.cfg"]
ext.internalFiles = ["stevekung/mods/indicatia/extra/**", "assets/indicatia/sounds/**", "assets/indicatia/sounds.json"]
ext.apiFiles = ["micdoodle8/**"]

jar
{
    if (!hasInternal)
    {
        excludes.addAll(project.ext.internalFiles)
    }
    excludes.addAll(project.ext.apiFiles)
}

curseforge {
    apiKey = api.indicatia
    project {
        id = "272146"
        changelog = ""
        changelogType = "markdown"
        releaseType = "beta"
        addGameVersion mcVersion

        mainArtifact(file("build/libs/Indicatia-" + mcVersion + "-" + version + ".jar")) {
            displayName = "Indicatia-" + mcVersion + "-" + version
            relations {
                requiredLibrary "stevekungs-lib"
            }
        }
    }
}

// processing jar
/*task processJar(type: Jar, dependsOn: "rePackAllJar") {
    outputs.upToDateWhen { false }

    if (hasInternal)
    {
        baseName = "IndicatiaExtra-" + mcVersion
    }
    else
    {
        baseName = "Indicatia-" + mcVersion
    }

    from(zipTree(project.ext.coreJar)) {
        includes.addAll(project.ext.coreFiles)
    }
}

task rePackAllJar(type: Jar, dependsOn: "copyModFiles") {
    from "temporary"
}

task copyModFiles(type: Copy, dependsOn: "reobfJar") {
    from(zipTree(project.ext.coreJar))
    into "temporary"
}

task deleteTemporary(type: Delete) {
    delete "temporary"
}

task buildDeobfJar(type: Jar) {
    from sourceSets.main.output
    excludes.addAll(project.ext.apiFiles)
    classifier = "deobf"
}

build.dependsOn(processJar)*/