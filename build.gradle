buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.11"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.1.0"
}

def api = new groovy.json.JsonSlurper().parseText(file("${api_token_path}").text)
def keystore = new groovy.json.JsonSlurper().parseText(file("${keystore_path}").text)
def mcVersion = project.mc_version
def hasInternal = project.hasProperty("internal")

apply plugin: "net.minecraftforge.gradle.forge"

sourceSets.main {
    java {
        srcDirs = ["src/main/java", "dependencies/main/java"]
    }
    resources {
        srcDirs = ["src/main/resources", "dependencies/main/resources"]
    }
}

version = project.version
group = "stevekung.mods.indicatia"
archivesBaseName = "Indicatia-All"
sourceCompatibility = targetCompatibility = 1.8

minecraft {
    version = "1.12.2-14.23.4.2760"
    runDir = "run"
    mappings = "snapshot_20171003"
    makeObfSourceJar = false

    replace "@FINGERPRINT@", keystore.sha1
    replaceIn "IndicatiaMod.java"
}

repositories {
    // Curse Gradle
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

ext.finalJar = "build/libs/" + (hasInternal ? "IndicatiaExtra-" : "Indicatia-") + mcVersion + "-" + version + ".jar"
ext.coreJar = "build/libs/" + archivesBaseName + "-" + version + ".jar"
ext.coreFiles = ["stevekung/mods/indicatia/**", "assets/indicatia/**", "license.txt", "pack.mcmeta", "META-INF/indicatia_at.cfg"]
ext.internalFiles = ["stevekung/mods/indicatia/extra/**", "assets/indicatia/sounds/**", "assets/indicatia/sounds.json"]
ext.apiFiles = ["micdoodle8/**"]

jar
{
    if (!hasInternal)
    {
        excludes.addAll(project.ext.internalFiles)
    }
    excludes.addAll(project.ext.apiFiles)
}

curseforge {
    apiKey = api.indicatia
    project {
        id = "272146"
        changelog = ""
        changelogType = "markdown"
        releaseType = "beta"
        addGameVersion mcVersion

        mainArtifact(file("build/libs/Indicatia-" + mcVersion + "-" + version + ".jar")) {
            displayName = "Indicatia-" + mcVersion + "-" + version
            relations {
                requiredLibrary "stevekungs-lib"
            }
        }
    }
}

// signing jar first
task buildJar(type: SignJar, dependsOn: "processJar") {
    keyStore = keystore.keystore_path
    alias = keystore.alias
    storePass = keystore.keystore_pass
    keyPass = keystore.keystore_pass
    inputFile = project.ext.finalJar
    outputFile = project.ext.finalJar
}

// processing jar
task processJar(type: Jar, dependsOn: "rePackAllJar") {
    outputs.upToDateWhen { false }

    if (hasInternal)
    {
        baseName = "IndicatiaExtra-" + mcVersion
    }
    else
    {
        baseName = "Indicatia-" + mcVersion
    }

    from(zipTree(project.ext.coreJar)) {
        includes.addAll(project.ext.coreFiles)
    }
    manifest {
        attributes.put("FMLAT", "indicatia_at.cfg")
        attributes.put("FMLCorePluginContainsFMLMod", "true")
    }
}

task rePackAllJar(type: Jar, dependsOn: "copyModFiles") {
    from "temporary"
}

task copyModFiles(type: Copy, dependsOn: "reobfJar") {
    from(zipTree(project.ext.coreJar))
    into "temporary"
}

task deleteTemporary(type: Delete) {
    delete "temporary"
}

task buildDeobfJar(type: Jar) {
    from sourceSets.main.output
    excludes.addAll(project.ext.apiFiles)
    classifier = "deobf"
    manifest {
        attributes.put("FMLAT", "indicatia_at.cfg")
        attributes.put("FMLCorePluginContainsFMLMod", "true")
    }
}

buildJar.finalizedBy(deleteTemporary)